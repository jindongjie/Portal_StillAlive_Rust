permissions:
  actions: write
  attestations: write
  checks: write
  contents: write
  deployments: write
  discussions: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

name: Release

on:
  release:
    types: [created]

jobs:
  build-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux (with ALSA support only for native Linux)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: portal-still-alive-linux-x86_64
            cargo_features: --features audio
       
          # Windows (disable ALSA)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: portal-still-alive-windows-x86_64.exe
            cargo_features: --no-default-features
          - os: windows-latest
            target: i686-pc-windows-msvc
            asset_name: portal-still-alive-windows-x86.exe
            cargo_features: --no-default-features
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            asset_name: portal-still-alive-windows-arm64.exe
            cargo_features: --no-default-features

          # macOS (disable ALSA)
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: portal-still-alive-macos-x86_64
            cargo_features: --no-default-features
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: portal-still-alive-macos-arm64
            cargo_features: --no-default-features

        
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev pkg-config gcc-multilib g++-multilib qemu-user-static

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        brew install pkg-config

    - name: Add Rust target
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Build
      env:
        CARGO_BUILD_TARGET: ${{ matrix.target }}
      run: |
        cargo build --release --target ${{ matrix.target }} --verbose ${{ matrix.cargo_features }}

    - name: Prepare binary
      shell: bash
      run: |
        BIN_NAME="Portal_StillAlive_Rust"
        case "${{ matrix.target }}" in
          *windows*) BIN_NAME="${BIN_NAME}.exe" ;;
        esac

        cp "target/${{ matrix.target }}/release/${BIN_NAME}" "${{ matrix.asset_name }}"

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ matrix.asset_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
